#!/usr/bin/env ruby
# Original version for Textmate found on
# http://blog.bleything.net/pages/mateup

# Updates Sublime 2/3 packages using their respective Github repositories

# Manage your packages in
# touch ~/.sublime.packages
# For each package create a new line like this
# Git => kemayo/sublime-text-2-git#python3
#
# Use ' => ' as a separator between package name and github repository
# Use '#branch' to pull from a specific branch


ENV['LC_ALL']   = nil
ENV['LC_CTYPE'] = 'en_US.UTF-8'

github_root = 'git://github.com'

packages = Hash[File.read(ENV['HOME']+'/.sublime.packages').split("\n").map{|i|i.split(' => ')}]

# packages provided by default installation
providedPackages = [
  'ActionScript',
  'AppleScript',
  'ASP',#
  'Batch File',
  'C#',
  'C++',
  'Clojure',
  'Color Scheme - Default',
  'CSS',
  'D',
  'Default',
  'Diff',
  'Erlang',
  'Go',
  'Graphviz',
  'Groovy',
  'Haskell',
  'HTML',
  'Java',
  'JavaScript',
  'Language - English',
  'LaTeX',
  'Lisp',
  'Lua',
  'Makefile',
  'Markdown',
  'Matlab',
  'Objective-C',
  'OCaml',
  'Pascal',
  'Python',
  'Perl',
  'PHP',
  'R',
  'Rails',
  'Regular Expressions',
  'RestructuredText',
  'Ruby',
  'Scala',
  'ShellScript',
  'SQL',
  'TCL',
  'Text',
  'Textile',
  'Theme - Default',
  'User',
  'Vintage',
  'XML',
  'YAML'
]

# escape spaces and ampersands
def cleanup(str)
  return str.gsub(/([ &])/, '\\\\\1')
end


def repo(source)
  if (source.nil? || source.split(/#/).length != 2)
    return source
  end

  return source.split(/#/)[0]
end

def branch(source)
  if (source.nil? || source.split(/#/).length != 2)
    return "master"
  end

  return source.split(/#/)[1]
end

def packageDir()
  if RUBY_PLATFORM.downcase.include?("darwin")
    return "#{ENV['HOME']}/Library/Application\ Support/Sublime\ Text\ 3/Packages"
  elsif RUBY_PLATFORM.downcase.include?("linux")
    return "#{ENV['HOME']}/.config/sublime-text-2/Packages"
  end

  return ""
end

dir = packageDir()

begin
  Dir.chdir dir
rescue Errno::ENOENT
  puts "Packages directory doesn't exist... creating it!"
  puts

  `mkdir -p '#{dir}'`
  retry
end

puts "Packages directory: #{dir}"

# Update existing
# Delete unkown
Dir.entries('.').each do |package_name|
  next if package_name =~ /^\./
  next unless File.directory? package_name

  source = packages[package_name]
  repo = repo(source)
  branch = branch(source)

  print "* #{package_name} #{source}: "

  if packages.delete package_name
    puts "package exists, updating"
    `cd #{cleanup package_name}; git pull; git checkout #{branch} &> /dev/null; cd ..;`

  else
    if providedPackages.index(package_name)
      print "Ignoring provided package\n"
    else
      print "don't know about this package.  Delete it? [y/n] "

      while answer = gets
        if answer =~ /^y/
          `rm -rf #{cleanup package_name}`
          puts "  * deleted"
          break
        elsif answer =~ /^(n|$)/
          break
        else
          print "Please enter 'y' or 'n': "
        end
      end
    end
  end
end

## Install new
packages.each do |name, source|
  puts "* #{name} doesn't exist; fetching..."

  repo = repo(source)
  branch = branch(source)

  cmd = "git clone #{github_root}/#{repo} #{cleanup name}"
  branch = branch(source)

  if branch != "master"
    `cd #{cleanup name}; git checkout #{branch} &> /dev/null; cd ..;`
  end
  puts "  * checked out #{branch}"
end
