#!/usr/bin/env ruby -w

# Updates Sublime 2 packages using the Github repositories

# Original version for Textmate found on http://blog.bleything.net/pages/mateup

ENV['LC_ALL']   = nil
ENV['LC_CTYPE'] = 'en_US.UTF-8'

github_root = 'git://github.com'
packages = {
  'Color Scheme - Monokai TimmFin' => 'timmfin/monokai-timmfin',
  'Git' => 'kemayo/sublime-text-2-git',
  'JSHint' => 'uipoet/sublime-jshint',
  'IncDec' => 'rmaksim/Sublime-Text-2-Inc-Dec-Value',
  'LatexTools' => 'SublimeText/LaTeXTools',
  'LineEndings' => 'SublimeText/LineEndings',
  'MarkdownEditing' => 'ttscoff/MarkdownEditing',
  'OpenCL' => 'oschrenk/OpenCL-Syntax',
  'PEGjs' => 'alexstrat/PEGjs.tmbundle',
  'PlainTasks' => 'aziz/PlainTasks',
  'Theme - Soda' => 'buymeasoda/soda-theme'
}

# packages provided by defult installation
providedPackages = [
  'ActionScript',
  'AppleScript',
  'ASP',#
  'Batch File',
  'C++',
  'C#',
  'Clojure',
  'Color Scheme - Default',
  'CSS',
  'D',
  'Default',
  'Diff',
  'Erlang',
  'Go',
  'Graphviz',
  'Groovy',
  'Haskell',
  'HTML',
  'Java',
  'JavaScript',
  'Language - English',
  'LaTeX',
  'Lua',
  'Lisp',
  'Makefile',
  'Matlab',
  'Markdown',
  'Objective-C',
  'OCaml',
  'Python',
  'Perl',
  'PHP',
  'R',
  'Rails',
  'Regular Expressions',
  'RestructuredText',
  'Ruby',
  'Scala',
  'ShellScript',
  'SQL',
  'TCL',
  'Text',
  'Textile',
  'Theme - Default',
  'User',
  'Vintage',
  'XML',
  'YAML'
]

# escape spaces and ampersands
def cleanup(str)
  return str.gsub(/([ &])/, '\\\\\1')
end

dir = "#{ENV['HOME']}/Library/Application\ Support/Sublime\ Text\ 2/Packages"
begin
  Dir.chdir dir
rescue Errno::ENOENT
  puts "Packages directory doesn't exist... creating it!"
  puts

  `mkdir -p '#{dir}'`
  retry
end

Dir.entries('.').each do |e|
  next if e =~ /^\./
  next unless File.directory? e

  package_name = e.gsub(/.tmbundle$/, '')

  print "* #{package_name}: "

  if packages.delete package_name
    puts "package exists, updating"
    `cd #{cleanup e}; git pull origin master; cd ..;`

  else
    if providedPackages.index(package_name)
      print "Ignoring provided package\n"
    else
      print "don't know about this package.  Delete it? [y/n] "

      while answer = gets
        if answer =~ /^y/
          `rm -rf #{cleanup e}`
          puts "  * deleted"
          break
        elsif answer =~ /^(n|$)/
          break
        else
          print "Please enter 'y' or 'n': "
        end
      end
    end
  end
end

packages.each do |name, source|
  puts "* #{name} doesn't exist; fetching..."
  cmd = "git clone #{github_root}/#{source} #{cleanup name}"
  `#{cmd}`.match(/(revision \d+)/)
  puts "  * checked out #{$1}"
end